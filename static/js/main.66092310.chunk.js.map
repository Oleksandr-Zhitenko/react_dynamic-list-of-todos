{"version":3,"sources":["components/TodoList/TodoList.tsx","api.js","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["TodoList","state","filterBy","query","getVisibleTodos","todos","props","visibleTodos","filter","todo","title","toLowerCase","includes","completed","handleChange","event","setState","target","value","handleSelect","currentTarget","onUserSelection","this","className","type","onChange","map","classNames","readOnly","checked","onClick","userId","id","React","Component","API_URL","loadTodos","a","fetch","response","json","loadUsers","CurrentUser","user","prevProps","clear","name","email","phone","App","selectedUserId","handeUserSelection","clearUser","data","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.66092310.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport classNames from 'classnames';\n\ntype Props = {\n  onUserSelection: (userId: number) => void,\n  todos: Todo[],\n};\n\ntype State = {\n  query: string,\n  filterBy: string,\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    filterBy: 'all',\n    query: '',\n  };\n\n  getVisibleTodos = () => {\n    const { query, filterBy } = this.state;\n    const { todos } = this.props;\n\n    let visibleTodos = todos;\n\n    if (query) {\n      visibleTodos = todos\n        .filter(todo => todo.title.toLowerCase().includes(query.toLowerCase()));\n    }\n\n    if (filterBy) {\n      switch (filterBy) {\n        case 'active':\n          return visibleTodos.filter(todo => todo.completed === false);\n\n        case 'completed':\n          return visibleTodos.filter(todo => todo.completed === true);\n\n        default:\n          visibleTodos = todos;\n      }\n    }\n\n    return visibleTodos;\n  };\n\n  handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({\n      query: event.target.value,\n    });\n  };\n\n  handleSelect = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({\n      filterBy: event.currentTarget.value,\n    });\n  };\n\n  render() {\n    const { onUserSelection } = this.props;\n    const { query } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <input\n          type=\"text\"\n          value={query}\n          onChange={this.handleChange}\n        />\n\n        <select onChange={this.handleSelect}>\n          <option value=\"all\">all</option>\n          <option value=\"active\">active</option>\n          <option value=\"completed\">completed</option>\n        </select>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.getVisibleTodos().map(todo => (\n              <li\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n                key={todo.id}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className=\"\n              TodoList__user-button\n              TodoList__user-button--selected\n              button\n            \"\n                  type=\"button\"\n                  onClick={() => {\n                    onUserSelection(todo.userId);\n                  }}\n                >\n                  User&nbsp;\n                  {todo.userId}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const API_URL = 'https://mate.academy/students-api';\n\nexport const loadTodos = async () => {\n  const response = await fetch(`${API_URL}/todos`);\n\n  return response.json();\n};\n\nexport const loadUsers = async (userId) => {\n  const response = await fetch(`${API_URL}/users/${userId}`);\n\n  return response.json();\n};\n","import React from 'react';\nimport './CurrentUser.scss';\nimport { loadUsers } from '../../api';\n\ntype State = {\n  user: User | null,\n};\n\ninterface Props {\n  userId: number,\n  clear: () => void,\n}\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    const user = await loadUsers(this.props.userId);\n\n    this.setState({\n      user,\n    });\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.userId !== this.props.userId) {\n      const user = await loadUsers(this.props.userId);\n\n      // eslint-disable-next-line\n      this.setState({\n        user,\n      });\n    }\n  }\n\n  render() {\n    const { user } = this.state;\n    const { clear } = this.props;\n\n    if (!user) {\n      return (\n        <div>User not found</div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {user.id}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n        <button\n          type=\"button\"\n          className=\"btn btn-secondary\"\n          onClick={clear}\n        >\n          clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { loadTodos } from './api';\n\ninterface State {\n  todos: Todo[],\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    todos: [],\n    selectedUserId: 0,\n  };\n\n  async componentDidMount() {\n    const data = await loadTodos();\n\n    this.setState({\n      todos: data,\n    });\n  }\n\n  handeUserSelection = (userId: number) => {\n    this.setState({\n      selectedUserId: userId,\n    });\n  };\n\n  clearUser = () => {\n    this.setState({\n      selectedUserId: 0,\n    });\n  };\n\n  render() {\n    const { selectedUserId, todos } = this.state;\n\n    // eslint-disable-next-line no-console\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            onUserSelection={this.handeUserSelection}\n            todos={todos}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser userId={selectedUserId} clear={this.clearUser} />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}